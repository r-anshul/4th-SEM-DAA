#include <iostream>
#include <vector>
#include <stack>

using namespace std;
bool dfs(int st, int end, int V, vector<vector<int>>& A)
{
    vector<int> vi(V,0);
    stack<int> S;
    S.push(st);
    vi[st]=1;
    while(!S.empty())
    {
        int node = S.top();
        S.pop();
        if(node == end)
            return true;
        for(int i=0;i<V;++i)
        {
            if (A[node][i]==1&&!vi[i])
            {
                vi[i]=1;
                S.push(i);
            }
        }
    }
    return false;
}
int main()
{
    int v,e,a,b;
    cout<<"Enter number of vertices - ";
    cin>>v;
    vector<vector<int>> A(v,vector<int>(v, 0));
    cout<<"Enter number of edges - ";
    cin>>e;
    cout<<"Enter edges - "<<endl;
    for(int i=0;i<e;++i)
    {
        cin>>a>>b;
        A[a][b]=1;
        A[b][a]=1;
    }
    int start, end;
    cout<<"Enter start node - ";
    cin>>start;
    cout<<"Enter end node -";
    cin>>end;
    if(dfs(start,end,v,A))
        cout<<"Path exists";
    else
        cout<<"No path exists";
    return 0;
}
