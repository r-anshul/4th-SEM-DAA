#include <iostream>
#include <climits>
#include <queue>
using namespace std;
#define MN 100
void dijkstra(int g[MN][MN], int n, int src)
{
    int dist[MN], pr[MN];
    bool vi[MN] = {false};
    for (int i = 0; i < n; i++)
	{
        dist[i] = INT_MAX;
        pr[i] = -1;
    }
    dist[src] = 0;
    priority_queue<pair<int, int>, vector<pair<int, int> >, greater<pair<int, int> > > pq;
    pq.push({0, src});
    while (!pq.empty())
	{
        int u = pq.top().second;
        pq.pop();
        if (vi[u]) continue;
        vi[u] = true;
        for (int v = 0; v < n; v++)
		{
            if(g[u][v]!=-1&&!vi[v] && dist[u]+g[u][v]<dist[v]) 
			{
                dist[v] = dist[u]+g[u][v];
                pr[v] = u;
                pq.push({dist[v], v});
            }
        }
    }
    for(int i = 0; i < n; i++)
	{
        cout << "Distance from " << src << " to " << i << " - " << dist[i] << "\nPath: ";
        if (dist[i] == INT_MAX)
		{
            cout << "No path\n";
            continue;
        }
        int path[MN];
        int idx = 0;
        for (int v = i; v != -1; v = pr[v])
			path[idx++] = v;
        for (int j = idx - 1; j >= 0; j--)
			cout << path[j] << " ";
        cout << "\n";
    }
}
int main() {
    int n, m;
    cout << "Enter number of nodes - ";
    cin >> n;
    cout << "Enter number of edges - ";
    cin >> m;
    int g[MN][MN];
    for (int i = 0; i < n; i++)
	{
        for (int j = 0; j < n; j++)
            g[i][j] = -1;
    }
    cout << "Enter the edges (u, v, weight) - \n";
    for (int i = 0; i < m; i++)
	{
        int u, v, w;
        cin >> u >> v >> w;
        g[u][v] = w;
        g[v][u] = w;
    }
    int src;
    cout << "Enter Akshay's house index - ";
    cin >> src;
    dijkstra(g, n, src);
    return 0;
}
